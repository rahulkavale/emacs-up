;;; init.el --- Make Emacs useful!
;;; Author: Vedang Manerikar
;;; Created on: 10 Jul 2016
;;; Commentary:

;; This file is a bare minimum configuration file to enable working
;; with Emacs for Helpshift newcomers.

;;; Code:

(when (version< emacs-version "24.4")
  (error "Unsupported Emacs Version! Please upgrade to a newer Emacs.  Emacs installation instructions: https://www.gnu.org/software/emacs/download.html"))

(require 'package)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/")
             t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             t)

(package-initialize)
;; Pin certain packages to their stable versions. This needs to
;; happen before `package-refresh-contents' to work properly.
(add-to-list 'package-pinned-packages '(cider . "melpa-stable"))
(add-to-list 'package-pinned-packages '(clj-refactor . "melpa-stable"))

(unless package-archive-contents
  (package-refresh-contents))

(defvar hs-package-list
  (append
   (when (eq system-type 'darwin)
     '(exec-path-from-shell ; Emacs plugin for dynamic PATH loading
       ))
   '(better-defaults ; Fixing weird quirks and poor defaults
     company  ; Modular in-buffer completion framework for Emacs
     helm     ; Emacs incremental completion and narrowing framework
     avy      ; Jump to things in Emacs tree-style.
     paredit  ; Minor mode for editing parentheses
     magit    ; It's Magit! An Emacs mode for Git.
     cider    ; Clojure Interactive Development Environment that Rocks
     clj-refactor ; A collection of simple clojure refactoring functions
     zenburn-theme ; A low contrast color theme for Emacs.
     idea-darkula-theme ; idea darkula themse same as for intelliJ idea darkula
     expand-region ; better selection for increasing the content selected incementally
     nav  ; enables directory browsing
     multiple-cursors ; add multiple cursors
     json-mode ; json mode for editing json
     anzu      ; package which shows total number of matches for a search
     ))
  "List of packages to install on top of default Emacs.")

(dolist (p hs-package-list)
  (when (not (package-installed-p p))
    (package-install p)))

;; Modify the CMD key to be my Meta key
(setq mac-command-modifier 'meta)

;; Set a directory for temporary/state related files.
(defvar dotfiles-dirname
  (file-name-directory (or load-file-name
                           (buffer-file-name)))
  "The directory where this code is running from.
Ideally, this will be ~/.emacs.d.")
(defvar tempfiles-dirname
  (concat dotfiles-dirname "temp-files/")
  "A sub-directory to hold temporary files generated by Emacs.")

;; Create the temp-files folder if necessary.
(make-directory tempfiles-dirname t)

;;; Exec PATH from Shell - Fix Emacs's understanding of the the Path
;;; var on Mac.
(when (and (eq system-type 'darwin)
           (eq window-system 'ns))
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize))

(require 'better-defaults)

;; Move Emacs state into the temp folder we've created.
(setq ido-save-directory-list-file (concat tempfiles-dirname "ido.last")
      recentf-save-file (concat tempfiles-dirname "recentf")
      save-place-file (concat tempfiles-dirname "places")
      backup-directory-alist `(("." . ,(concat tempfiles-dirname "backups"))))

;; `visible-bell' is broken on Emacs 24 downloaded from Mac for OSX
(when (< emacs-major-version 25)
  (setq visible-bell nil))

;;; Interactively Do Things
;; basic ido settings
(require 'ido)

(ido-mode t)
(ido-everywhere)
(setq ido-enable-flex-matching t
      ido-use-virtual-buffers t
      ido-create-new-buffer 'always
      ido-use-filename-at-point t)
(add-hook 'ido-make-buffer-list-hook 'ido-summary-buffers-to-end)

;; Ido power user settings
(defadvice completing-read
    (around ido-steroids activate)
  "IDO on steroids :D from EmacsWiki."
  (if (boundp 'ido-cur-list)
      ad-do-it
    (setq ad-return-value
          (ido-completing-read
           prompt
           (all-completions "" collection predicate)
           nil require-match initial-input hist def))))

;;; Company - complete anything
(require 'company)
;; Enable company everywhere
(add-hook 'after-init-hook 'global-company-mode)
(setq-default company-lighter " cmp")
(define-key company-active-map [tab] 'company-complete)
(define-key company-active-map (kbd "TAB") 'company-complete)

;;; Helm - Handy completion and narrowing
;; Explicitly turn off global `helm-mode'
(require 'helm-config)
(helm-mode -1)

;; Various useful key-bindings (other than Helm Defaults)
(global-set-key (kbd "C-x c r") nil) ; unset this because I plan to
                                        ; use it as a prefix key.
(global-set-key (kbd "C-x c r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-x c r r") 'helm-regexp)
(global-set-key (kbd "C-x c C-b") 'helm-mini)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x c SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-x c r i") 'helm-register)
;; Useful defaults: C-x c i, C-x c I

;;; Avy
(require 'avy)
(global-set-key (kbd "M-g g") 'avy-goto-line)
(global-set-key (kbd "M-g SPC") 'avy-goto-word-1)
(avy-setup-default)

;;; Paredit
(eval-after-load 'paredit
  '(progn
     ;; `(kbd "M-s")' is a prefix key for a bunch of search related
     ;; commands by default. I want to retain this.
     (define-key paredit-mode-map (kbd "M-s") nil)))
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(eval-after-load 'clojure-mode
  '(progn (add-hook 'clojure-mode-hook 'enable-paredit-mode)))
(eval-after-load 'cider-repl
  '(progn (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
          (define-key cider-repl-mode-map (kbd "C-M-q") 'prog-indent-sexp)
          (define-key cider-repl-mode-map (kbd "C-c M-o")
            'cider-repl-clear-buffer)))

;;; Magit
;; Provide a global keybinding for Magit
(global-set-key (kbd "C-x g") 'magit-status)

;;; Cider
(eval-after-load 'cider-mode
  '(progn
     (defun cider-repl-prompt-on-newline (ns)
       "Return a prompt string with newline.
NS is the namespace information passed into the function by
cider."
       (concat ns ">\n"))

     (setq cider-repl-history-file (concat tempfiles-dirname
                                           "cider-history.txt")
           cider-repl-history-size most-positive-fixnum
           cider-repl-wrap-history t
           cider-repl-prompt-function 'cider-repl-prompt-on-newline
           nrepl-buffer-name-separator "-"
           nrepl-buffer-name-show-port t
           nrepl-log-messages t
           cider-annotate-completion-candidates t
           cider-completion-annotations-include-ns 'always
           cider-show-error-buffer 'always
           cider-prompt-for-symbol nil)

     (add-hook 'cider-mode-hook 'eldoc-mode)))

;;; Clj Refactor
(eval-after-load 'clj-refactor
  '(progn
     (defun turn-on-clj-refactor ()
       (clj-refactor-mode 1)
       (cljr-add-keybindings-with-prefix "C-c m"))

     (setq cljr-favor-prefix-notation nil
           ; stops cljr from running tests when we connect to the repl
           cljr-eagerly-build-asts-on-startup nil)

     (eval-after-load 'clojure-mode
       '(progn
          (add-hook 'clojure-mode-hook 'turn-on-clj-refactor)
          (add-hook 'clojure-mode-hook 'hs-minor-mode)))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("345f8f92edc3508574c61850b98a2e0a7a3f5ba3bb9ed03a50f6e41546fe2de0" "40f6a7af0dfad67c0d4df2a1dd86175436d79fc69ea61614d668a635c2cd94ab" default)))
 '(package-selected-packages
   (quote
    (clj-refactor cider magit paredit avy helm company better-defaults exec-path-from-shell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;; Theme and Look
;; This should load after `custom-safe-themes' to avoid Emacs
;; panicking about whether it is safe or not.
(load-theme 'idea-darkula t)

;;expand-region config
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

;; enable delete selection mode which allows to delete/replace text in a selection region
(delete-selection-mode 1)

;; starts emacs in full screen
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))

;; change binding for switching between windows
(global-set-key (kbd "M-o") 'other-window)

;;change clj refactor prefix keybinding
(cljr-add-keybindings-with-prefix "C-c m")
(setq cljr-warn-on-eval nil)

;;disable arrow keys
(global-unset-key (kbd "<left>"))
(global-unset-key (kbd "<right>") )
(global-unset-key (kbd "<up>") )
(global-unset-key (kbd "<down>") )

;; enable multiple cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(global-set-key (kbd "C-c C-_") 'hs-hide-all)
(global-set-key (kbd "C-c C-+") 'hs-show-all)
(global-set-key (kbd "C-c C-M-=") 'hs-toggle-hiding)

;; include multiple lives overalpping for smooth scorilling of screens
(setq scroll-step 10)

;; enable linum mode by default to display line numbers for every file
(setq linum-format "%2d\u2502")
(global-linum-mode 1)

;;; Set font to a readable one
(set-face-attribute 'default nil :height 150)

;;; avoid running tests eargerly when we connect to nrepl
(setq cljr-eagerly-build-asts-on-startup nil)

(setq cljr-warn-on-eval nil)

;; Enable anzu mode everywhere
(global-anzu-mode +1)

;;; Reload the buffer without asking for confirmation
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

(global-set-key (kbd "C-c C-r") 'revert-buffer-no-confirm)

;;; Duplicating a line http://stackoverflow.com/a/998472
(defun duplicate-line (arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline) ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    )                                   ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))

(global-set-key (kbd "C-c C-d C-l") 'duplicate-line)

;;; Set cider-eval-buffer to C-c e
(global-set-key (kbd "C-c e") 'cider-eval-buffer)

(provide 'init)
;;; init.el ends here
